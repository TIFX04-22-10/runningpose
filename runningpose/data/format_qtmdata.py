# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/17_format_qtmdata.ipynb (unless otherwise specified).

__all__ = ['parse_args', 'main']

# Cell
import numpy as np
import pandas as pd
import argparse
import os

# Cell
def parse_args():
    parser = argparse.ArgumentParser(
        description='Reformat qtmdata so that we can train.'
    )
    parser.add_argument(
        '--data-file',
        dest='data_file',
        help='qtm text file that has been formated in matlab',
        type=str
    )
    parser.add_argument(
        '--output-dir',
        dest='output_dir',
        help='directory for reformated keypoint data (default: ./)',
        default='./',
        type=str
    )
    parser.add_argument(
        '--cut-frame',
        dest='cut_frame',
        type=int,
        choices=(0, 10e10),
    )

    return parser.parse_args()

# Cell
def main(args):
    """
    Loads the qtm data then removes unwanted keypoints.
    Then it infers new keypoints adds them.
    Further we scale the dataset using a the norm vector between the
    root and 'SpineThoracic2'.
    """
    # Loads the textfiles
    labels_np = np.loadtxt('qtm_labels.txt', dtype = 'str')
    data_3D = np.loadtxt(args.data_file, dtype = 'float', delimiter= ',')

    # Reformats the data to a dataframe
    data_3D = pd.DataFrame(data_3D, index=labels_np).T

    # Remove unwanted keypoints
    data_3D = data_3D.drop(
        columns=[
            'HeadL', 'HeadR', 'Chest', 'LThighFrontLow', 'RThighFrontLow',
            'LShinFrontHigh', 'RShinFrontHigh', 'LForefoot5', 'RForefoot5',
            'LHeelBack', 'RHeelBack', 'LArm', 'RArm','WaistLFront', 'WaistL',
            'WaistRFront', 'WaistR'
        ]
    )
    # Create "new" keypoints by finding the mean between specific keypoints
    left_elbow_3D = data_3D.loc[:, ['LElbowOut','LElbowIn']].mean(axis=1)
    right_elbow_3D = data_3D.loc[:, ['RElbowOut','RElbowIn']].mean(axis=1)

    left_wrist_3D = data_3D.loc[:, ['LWristIn','LWristOut']].mean(axis=1)
    right_wrist_3D = data_3D.loc[:, ['RWristOut','RWristIn']].mean(axis=1)

    left_knee_3D = data_3D.loc[:, ['LKneeOut','LKneeIn']].mean(axis=1)
    right_knee_3D = data_3D.loc[:, ['RKneeOut','RKneeIn']].mean(axis=1)

    left_ankle_3D = data_3D.loc[:, ['LAnkleOut','LAnkleIn']].mean(axis=1)
    right_ankle_3D = data_3D.loc[:, ['RAnkleOut','RAnkleIn']].mean(axis=1)

    # Remove the keypoints that was taken as a mean
    data_3D = data_3D.drop(
        columns=[
            'LElbowOut','LElbowIn', 'RElbowOut','RElbowIn',
            'LWristIn','LWristOut', 'RWristIn','RWristOut',
            'LKneeIn', 'LKneeOut','RKneeIn', 'RKneeOut',
            'LAnkleOut','LAnkleIn','RAnkleOut','RAnkleIn'
        ]
    )
    # Adds the new keypoint data to the dataframe
    data_3D['LElbow'] = left_elbow_3D
    data_3D['RElbow'] = right_elbow_3D
    data_3D['LWrist'] = left_wrist_3D
    data_3D['RWrist'] = right_wrist_3D
    data_3D['LKnee'] = left_knee_3D
    data_3D['RKnee'] = right_knee_3D
    data_3D['LAnkle'] = left_ankle_3D
    data_3D['RAnkle'] = right_ankle_3D

    # Remove every other row, our videodata Miqus is 85hz and the data is 170hz
    data_3D = data_3D.iloc[::2]

    if args.cut_frame is not None:
        # Cuts the data by the same frame as we cut the video.
        data_3D = data_3D[:args.cut_frame]

    # Creates output names that depends on the name of the data file
    data_file_name = os.path.basename(
        os.path.normpath(args.data_file)).rsplit(".")[0]
    out_2D = os.path.join(
        args.output_dir, data_file_name + '_2D_keypoints.csv')
    out_3D = os.path.join(
        args.output_dir, data_file_name + '_3D_keypoints.csv')

    # Save the keypoint data as csv files
    # TODO: Add reformat to 2D data i.e 3DWorld -> 3DCamera -> 2D (projection)
    # pd.DataFrame.to_csv(data_2D, path_or_buf=out_2D)
    # TODO: Check if it is better to save this as npz instead.
    pd.DataFrame.to_csv(data_3D, path_or_buf=out_3D)

# Cell
try: from nbdev.imports import IN_NOTEBOOK
except: IN_NOTEBOOK=False

if __name__ == '__main__' and not IN_NOTEBOOK:
    args = parse_args()
    main(args)