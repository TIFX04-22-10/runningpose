# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/19_train_detectron2.ipynb (unless otherwise specified).

__all__ = ['keypoint_names', 'keypoint_flip_map', 'cfg']

# Cell
# Import some common libraries
import numpy as np
import matplotlib.pyplot as plt
# import os, json, cv2, random

# Import some common detectron2 utilities
import detectron2
from detectron2 import model_zoo
from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog
from detectron2.data.datasets import register_coco_instances

# Cell
# register_coco_instances("my_dataset_train", {}, "json_annotation_train.json", "path/to/image/dir")
# register_coco_instances("my_dataset_val", {}, "json_annotation_val.json", "path/to/image/dir")

# Cell
# TODO: Add names from dataframe.
# TODO: Update to match the new model
keypoint_names = [
    'RWaist', # 1
    'LWaist', # 2
    'RKnee',  # 3
    'LKnee',  # 4
    'RWrist', # 5
    'LWrist', # 6
    'RElbow', # 7
    'LElbow', # 8
    'RForefoot2', # 9
    'RAnkleOut', # 10
    'LForefoot2', # 11
    'LAnkleOut', # 12
    'WaistBack', # 13
    'RHand2', # 14
    'RShoulderTop', # 15
    'LHand2', # 16
    'LShoulderTop', # 17
    'SpineThoracic12', # 18
    'SpineThoracic2', # 19
    'HeadFront' # 20
]
keypoint_flip_map = [
    ('RShoulderTop', 'LShoulderTop'), ('RElbow', 'LElbow'), ('RWrist', 'LWrist'),
    ('RHand2', 'LHand2'), ('RWaist', 'LWaist'), ('RKnee', 'LKnee'),
    ('RAnkleOut', 'LAnkleOut'), ('RForefoot2', 'LForefoot2')
]
# MetadataCatalog.get("my_dataset_train").keypoint_names = keypoint_names
# MetadataCatalog.get("my_dataset_train").keypoint_flip_map = keypoint_flip_map
# MetadataCatalog.get("my_dataset_train").evaluator_type = "coco"

# dataset_dicts = DatasetCatalog.get("my_dataset_train")

# Cell
cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file(
    "COCO-InstanceSegmentation/mask_rcnn_R_101_FPN_3x.yaml"))
# cfg.DATASETS.TRAIN = ("my_dataset_train",)
# cfg.DATASETS.TEST = ("my_dataset_test")
cfg.DATALOADER.NUM_WORKERS = 2
# Let training initialize from model zoo
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(
    "COCO-InstanceSegmentation/mask_rcnn_R_101_FPN_3x.yaml")
cfg.SOLVER.IMS_PER_BATCH = 2
cfg.SOLVER.BASE_LR = 0.00025  # Pick a good LR
cfg.SOLVER.MAX_ITER = 300    # 300 iterations
cfg.SOLVER.STEPS = []        # Do not decay learning rate
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128 # NOTE: Increase if possible
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 1  # Only have one class
cfg.MODEL.RETINANET.NUM_CLASSES = 1
cfg.MODEL.ROI_KEYPOINT_HEAD.NUM_KEYPOINTS = 20
# More info on below see section 1.3: https://cocodataset.org/#keypoints-eval
cfg.TEST.KEYPOINT_OKS_SIGMAS = np.ones((20, 1), dtype=float).tolist()

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)